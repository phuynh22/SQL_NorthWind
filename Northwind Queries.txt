--Find top 10 purchased products based on units sold for each product sorted in a descent order
SELECT TOP 10 p.ProductName, SUM(od.Quantity) AS [Number of Units Sold]
FROM
[Order Details] od
INNER JOIN
Products p
ON od.ProductID = p.ProductID
GROUP BY p.ProductName
ORDER BY [Number of Units Sold] DESC


--Find the product has the second highest cost in the company
SELECT ProductName, UnitPrice FROM Products p1
WHERE 1 = (SELECT COUNT(DISTINCT UnitPrice)
FROM Products p2
WHERE p2.UnitPrice > p1.UnitPrice)


--Use DENS_RANK() to rank the sold products in each city in the USA
SELECT  p.ProductName, c.City, od.quantity,
DENSE_RANK() OVER (PARTITION BY c.Country ORDER BY od.quantity DESC) AS Product_Rank  
FROM 
Customers c
INNER JOIN Orders o
ON c.CustomerID = o.CustomerID
INNER JOIN
[Order Details] od
ON o.OrderID = od.OrderID
INNER JOIN 
Products p
ON od.ProductID = p.ProductID
WHERE Country = 'USA'
ORDER BY od.Quantity DESC


--Find all orders in Order table that took more than 2 days to ship after the order date,
--and the number of days after the order date with the customer ID and Country,
--where the total sale value is greater than 10000
SELECT o.OrderID, o.CustomerID, o.OrderDate, o.ShippedDate, o.ShipCountry,
DATEDIFF(DAY, OrderDate, ShippedDate) AS Duration_to_Ship,
SUM(od.Quantity * od.UnitPrice) AS [Total Sale Amount]
FROM
Orders o
INNER JOIN
[Order Details] od
ON o.OrderID = od.OrderID
WHERE
DATEDIFF(DAY, OrderDate, ShippedDate) > 2
GROUP BY o.OrderID, CustomerID, OrderDate, ShippedDate, ShipCountry
HAVING SUM(od.Quantity * od.UnitPrice) > 10000
ORDER BY DATEDIFF(DAY, OrderDate, ShippedDate) DESC

--Create product stock status using CASE Statement
SELECT productid,ProductName,
CASE
WHEN (UnitsInStock < UnitsOnOrder and
Discontinued = 0)
THEN 'Negative Inventory - Order Now!'
WHEN ((UnitsInStock - UnitsOnOrder)<
ReorderLevel and Discontinued = 0)
THEN 'Reorder Level Reached - Place Order'
WHEN (Discontinued = 1)
THEN '****Discontinued****'
ELSE 'In Stock'
END AS [Stock Status]
FROM products


-- Find number of orders per product
SELECT
p.ProductName, COUNT(o.orderid) AS [Number of
Orders]
FROM Products p
LEFT JOIN [Order Details] od
ON p.ProductID = od.ProductID
LEFT JOIN Orders o
ON o.OrderID = od.OrderID
WHERE YEAR(o.OrderDate) = '2017'
GROUP BY p.ProductName
ORDER BY COUNT(o.orderid) DESC


-- Create a list of products with the current and future required stock
;WITH itemCTE (ProductID, ProductName, UnitsInStock, Desciption)
AS
(
SELECT ProductID, ProductName, UnitsInStock ,'Present Stock' AS
UnitsInStock
FROM Products
WHERE UnitsInStock != 0
UNION ALL
SELECT ProductID, ProductName,
(UnitsInStock + (UnitsInStock *20 )/100) AS UnitsInStock,
'Next Month Stock' AS UnitsInStock
FROM Products
WHERE UnitsInStock != 0
)
SELECT * FROM itemCTE ORDER BY ProductID


-- Find number of orders, revenue and AVG revenue per order in year 2017
SELECT
COUNT(o.orderid) AS [Number of Orders],
SUM(od.unitprice * od.quantity) AS [Revenue US Dollar],
AVG(od.unitprice * od.quantity) AS [Revenue Average per Order]
FROM orders o
INNER JOIN [Order Details] od
ON o.OrderID = od.OrderID
WHERE YEAR(o.OrderDate) = '2017'


--Find the top ten customers who contributed to the highest sale with
--their cities and countries for the year 2018
USE Northwind
GO
SELECT TOP 10 c.CompanyName, c.City, c.Country,
SUM(od.Quantity * od.UnitPrice) AS Total
FROM Customers c
INNER JOIN Orders o
ON c.CustomerID = o.CustomerID
INNER JOIN
[Order Details] od
ON o.OrderID = od.OrderID
WHERE YEAR (o.OrderDate) = '2018'
GROUP BY c.CompanyName, c.City, c.Country
ORDER BY Total DESC


--Prepare a list of products that generate total sale greater than --or
--equal to 30000 and number of units sold for each products for the year 2018
SELECT p.ProductName, SUM(od.Quantity) as [Number of Unites],
SUM(od.Quantity * od.UnitPrice) as [Total Sale Amount]
FROM Orders o
INNER JOIN
[Order Details] od
ON o.OrderID = od.OrderID
INNER JOIN
Products p
ON od.ProductID = p.ProductID
WHERE YEAR(o.orderdate) = '2018'
GROUP BY p.ProductName
HAVING SUM(od.Quantity * od.UnitPrice) >= 30000
ORDER BY [Total Sale Amount] DESC


--Classify customers from A to D based on their sales volumes as follows:
--WHEN Total sale greater than or equal 30000 THEN grade is A
--WHEN Total sale less than 30000 and greater or equal than 20000
--THEN grade is B
--WHEN Total sale less than 20000 THEN grade is C
SELECT c.CompanyName,
SUM(od.Quantity * od.UnitPrice) AS Total,
CASE
WHEN SUM(od.Quantity * od.UnitPrice) >= 30000 THEN 'A'
WHEN SUM(od.Quantity * od.UnitPrice) < 30000 and sum(od.Quantity * od.UnitPrice) >= 20000
THEN 'B'
ELSE 'C'
END AS Customer_Grade
FROM Customers c
INNER JOIN Orders o
ON c.CustomerID = o.CustomerID
inner join
[Order Details] od
ON o.OrderID = od.OrderID
GROUP BY c.CompanyName
ORDER BY Total DESC


--Find customers that generated total sale amount more than the average sale volume in
--the company
SELECT c.CompanyName, c.City, c.Country,
SUM(od.Quantity * od.UnitPrice) AS Total
FROM Customers c
INNER JOIN Orders o
ON c.CustomerID = o.CustomerID
INNER JOIN
[Order Details] od
ON o.OrderID = od.OrderID
WHERE YEAR (o.OrderDate) = '2018'
GROUP BY c.CompanyName, c.City, c.Country
HAVING
SUM(od.Quantity * od.UnitPrice) >=
(SELECT AVG(Quantity * UnitPrice) FROM [Order Details])
ORDER BY Total DESC


--Customers did not buy from the company for more than 20 monthsUSE Northwind
SELECT c.CompanyName, MAX(o.OrderDate) AS [Last Order Date],
DATEDIFF(MONTH, MAX(o.OrderDate), GETDATE()) AS [Months Since Last Order]FROM Customers AS c
INNER JOIN Orders AS o ON c.CustomerID = o.CustomerID
GROUP BY c.CompanyName
HAVING DATEDIFF(MONTH, MAX(o.OrderDate), GETDATE()) > 20
ORDER BY [Months Since Last Order] DESC


--Find the customers list and the number of orders per customer
SELECT c.CompanyName, c.City ,
(SELECT COUNT(OrderID) FROM Orders o
WHERE c.CustomerID = o.CustomerID ) AS [Number Of Orders] FROM
Customers c
ORDER BY [Number Of Orders] DESC


--Find the duration in days between two orders
SELECT a.CustomerID, a.OrderDate,
DATEDIFF(DAY, a.OrderDate, b.OrderDate) AS [Days between two orders]FROM Orders a
INNER JOIN
Orders b
ON a.OrderID = b.OrderID - 1
ORDER BY a.OrderDate